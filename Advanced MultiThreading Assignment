//Advanced_multithreading_assignment
//1] create a multi-threaded application by using Thread pool.create 2 threads. each thread should display characters from A to J. [ make sure while one thread executes , other thread should not interfere ]
import java.util.concurrent.*;
class app implements Runnable
{
	synchronized static void disp() {
		char ch=65;
		for(int i=0;i<10;i++) {
			System.out.println(ch+" "+Thread.currentThread());
			ch++;
		}
	}
	public void run() {
		disp();
	}
}
public class myapp1 {

	public static void main(String[] args) {
		ExecutorService exe=Executors.newFixedThreadPool(2);
		app a=new app();	
		exe.execute(a);
		exe.execute(a);
		exe.shutdown();	
	}
}


//2) create a multi-threaded application by using Thread pool.create 2 threads. each thread should display numbers from 1 to 10. [ make sure while one thread executes , other thread should not interfere ]
//Also when first thread displays nos. from 1 to 5 it should released the lock and allow other thread to display nos. from 1 to 5 and then previous thread will display nos. from 6 to 10 and so on.

import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class myapk implements Runnable{
	
		synchronized void disp() {
			
			for(int i=1;i<=10;i++) {
			
				if(i==6) {
				try {
					wait();
				}
				catch(InterruptedException e) {		
				}
				}
				System.out.println(i+" "+Thread.currentThread());
				notifyAll();
			}
			
		}
		public void run() {
			disp();
		}

	public static void main(String[] args) {
		ExecutorService exe=Executors.newFixedThreadPool(2);
			myapk m=new myapk();
			exe.execute(m);
			exe.execute(m);
			exe.shutdown();
		}
}


//3) create 3 threads in such a way that while one thread is executing, 2 threads cannot interfere. they should display output "Exec  0" to "Exec 5".

import java.util.concurrent.*;
import java.util.concurrent.locks.ReentrantLock;

class app implements Runnable
{
	synchronized static void disp() {
		
		for(int i=0;i<=5;i++) {
			System.out.println(i+" "+Thread.currentThread());	
		}
	}
	public void run() {
		disp();
	}
}
public class myapp1 {

	public static void main(String[] args) {
		ExecutorService exe=Executors.newFixedThreadPool(3);
		app a=new app();	
		exe.execute(a);
		exe.execute(a);
		exe.execute(a);
		exe.shutdown();
	}
}

/*
 4) create a multi-threaded application by using 
 Thread pool and ReentrantLock (explicit locking).
 create 2 threads. each thread should display 
 characters from A to J. [ make sure while one 
 thread executes ,
  other thread should not interfere ]

 */

import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class myapk implements Runnable{
	static ReentrantLock myapk=new ReentrantLock();
		void disp() {
			myapk.lock();
			char c=65;
			for(int i=0;i<10;i++) {
				System.out.println(c+" "+Thread.currentThread());
				c++;
			}
			myapk.unlock();
		}
		public void run() {
			disp();
		}

	public static void main(String[] args) {
		ExecutorService exe=Executors.newFixedThreadPool(2);
		myapk m=new myapk();
		exe.execute(m);
		exe.execute(m);
		exe.shutdown();
		}
}	


//-----------------------------------------------------------
/*
 5) create a multi-threaded application by using Thread pool and ReentrantLock.create 2 threads. each thread should display numbers from 1 to 10. [ make sure while one thread executes , other thread should not interfere ]
Also when first thread displays nos. from 1 to 5 it should released the lock and allow other thread to display nos. from 1 to 5 and then previous thread will display nos. from 6 to 10 and so on.
 */

import java.util.concurrent.*;
import java.util.concurrent.locks.*;

public class myapk implements Runnable{
	static ReentrantLock myapk=new ReentrantLock();
	static Condition con=myapk.newCondition();
		void disp() {
			myapk.lock();
			
			for(int i=1;i<=10;i++) {
			
				if(i==6) {
				try {
					con.await();
				}
				catch(InterruptedException e) {		
				}
				}
				System.out.println(i+" "+Thread.currentThread());
				con.signalAll();
			}
			myapk.unlock();
		}
		public void run() {
			disp();
		}

	public static void main(String[] args) {
		ExecutorService exe=Executors.newFixedThreadPool(2);
			myapk m=new myapk();
			exe.execute(m);
			exe.execute(m);
			exe.shutdown();
		}
}
